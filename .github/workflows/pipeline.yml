name: "History microservice CI/CD"

on:
  push:
    paths-ignore:
      - "README.md"
    branches:
      - main

jobs:
  test:
    name: Build and test Node.js project
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "npm"
      - name: Install dependencies
        run: npm ci
      - name: Run tests
        run: npm test
  
  sonarcloud:
    name: Code linting with SonarCloud
    needs: [ test ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          # Shallow clones should be disabled for a better relevancy of analysis
          fetch-depth: 0
      - name: Install dependencies
        run: npm ci
      - name: Test and coverage
        run: ./node_modules/.bin/jest --coverage
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  publish:
    name: Publish Dockerfile to Docker Hub
    needs: [ test ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Use cache
        uses: actions/cache@v3
        id: npm-cache
        with:
          path: ./node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/history:latest

  deploy:
    name: Deployment
    needs: [ test, publish ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Set AZURE_CORE_OUTPUT to None
        run: echo "AZURE_CORE_OUTPUT=none" >> $GITHUB_ENV
      - name: Set AKS Context
        run: az aks get-credentials --name dev-frankencluster --resource-group frankengroup
      - name: Deploy to AKS
        run: kubectl apply -f ./deployments
      - name: Restart Deployment
        run: kubectl rollout restart deployment/history

  snyk-docker:
    name: Static Docker image security analysis with Synk
    needs: [ publish ]
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Run Snyk to check Docker image for vulnerabilities
        continue-on-error: true
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ secrets.DOCKER_USERNAME }}/history-microservice:latest
          args: --file=./Dockerfile
            --severity-threshold=high
            --run-quality-checks=true
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif

  snyk-code:
    name: Static code security analysis with Synk
    needs: [ test ]
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - uses: actions/checkout@v3
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk.sarif
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif